; Author: Chad E Brown
; June 2006
; Testing Scunak on the woz1 basic set theory examples + similar basic set theory problems.

(load "test-connect.lisp")

(defun woz1-test ()
  (send-a '(LET "U" OBJ))
  (send-a '(LET "A" ("powerset" "U")))
  (send-a '(LET "B" ("powerset" "U")))
  (send-a '(LET "C" ("powerset" "U")))
  (send-a '(LET "D" ("powerset" "U")))
  (send-a '(TUTOR-AUTO-BACK "setextsub" "orE" "powersetTI"))
  (send-a '(TUTOR-STUDENT-USABLE "notE" "xmcases" "eqI" "notI" "contradiction" "symeq" "transeq" "symtrans1eq" "symtrans2eq" "binunionT" "binintersectT" "powersetT" "setminusT" "complementT" "setextT" "subsetTI" "powersetTI" "powersetTE" "powersetTI1" "powersetTE1" "complementTI" "complementTE" "complementTI1" "complementTE1" "binintersectTEL" "binintersectTER" "binintersectTI" "binunionTE1" "binunionTE" "binunionTIL" "binunionTIR" "binintersectTELcontra" "binintersectTERcontra" "binunionTILcontra" "binunionTIRcontra" "binunionTEcontra" "demorgan1a" "demorgan2a" "demorgan2a1" "demorgan2a2" "demorgan1b" "demorgan2b2" "demorgan2b" "demorgan1" "demorgan2" "demorgan1Eq2" "demorgan2Eq2" "demorgan3Eq2" "demorgan4Eq2" "contrasubsetT" "contrasubsetT1" "binintersectTSub1" "binintersectTSub2" "binunionTSub1" "binunionTSub2" "impI" "impE" "woz13rule1" "woz13rule2" "woz13rule3" "doubleComplementSub1" "doubleComplementSub2" "doubleComplementEq" "subsetTrans"))
  (send-a '(TUTOR-ONLY-USABLE "woz13rule4"))
  (send-a '(TUTOR ("woz1_1" "U" "A" "B")))
  (send-a '(LET ("x") "U"))
  (send-a '(ASSUME ("x" IN ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN ("binintersectT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_1" "U" "A" "B")))
  (send-a '(LET ("x") "U") '(OK) '(NOT-OK))
  (send-a '(ASSUME ("x" IN ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN ("binintersectT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("complementT" "U" "A") <= ("complementT" "U" ("binintersectT" "U" "A" "B")))) '(NOT-OK) '(OK))
  (send-a '(CLEARLY ("x" IN ("complementT" "U" ("binintersectT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("complementT" "U" "A") <= ("complementT" "U" ("binintersectT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_2" "U" "A" "B" "C" "D")))
  (send-a '(CLEARLY (("complementT" "U" ("binintersectT" "U" ("binunionT" "U" "A" "B") ("binunionT" "U" "C" "D"))) == ("binunionT" "U" ("complementT" "U" ("binunionT" "U" "A" "B")) ("complementT" "U" ("binunionT" "U" "C" "D"))))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("complementT" "U" ("binunionT" "U" "A" "B"))==("binintersectT" "U" ("complementT" "U" "A") ("complementT" "U" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("complementT" "U" ("binunionT" "U" "C" "D"))==("binintersectT" "U" ("complementT" "U" "C") ("complementT" "U" "D")))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_3" "U" "A" "B" "C")))
  (send-a '(CLEARLY ("A" <= ("binunionT" "U" "A" "C"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("B" <= ("binunionT" "U" "B" "C"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(NOT-OK) '(OK))
  (send-a '(CLEARLY (("binintersectT" "U" "A" "B") <= ("binintersectT" "U" ("binunionT" "U" "A" "C") ("binunionT" "U" "B" "C")))) '(NOT-OK DIAGNOSIS) '(OK))
  (send-a '(CLEARLY (("binintersectT" "U" "A" "B") <= ("binunionT" "U" "A" "C"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("binintersectT" "U" "A" "B") <= ("binunionT" "U" "B" "C"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("binintersectT" "U" "A" "B") <= ("binintersectT" "U" ("binunionT" "U" "A" "C") ("binunionT" "U" "B" "C")))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_4" "U" "A" "B")))
  (send-a '(ASSUME ("A" <= ("complementT" "U" "B"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(NOT-OK) '(OK STUDENT-SUCCESSFUL EXIT-TUTOR))
  (send-a '(LET ("x") "U") '(OK) '(NOT-OK))
  (send-a '(ASSUME ("x" IN "B")) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN "A"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_4" "U" "A" "B")))
  (send-a '(ASSUME ("A" <= ("complementT" "U" "B"))) '(OK) '(NOT-OK))
  (send-a '(LET ("x") "U") '(OK) '(NOT-OK))
  (send-a '(ASSUME ("x" IN "B")) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("x" IN ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_5" "U" "A" "B")))
  (send-a '(LET ("x") "U") '(OK) '(NOT-OK))
  (send-a '(ASSUME ("x" IN ("complementT" "U" ("binunionT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN ("binunionT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("x" IN ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR ("woz1_5" "U" "A" "B")))
  (send-a '(LET ("x") "U") '(OK) '(NOT-OK))
  (send-a '(ASSUME ("x" IN ("complementT" "U" ("binunionT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN ("binunionT" "U" "A" "B")))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("not" ("x" IN "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("x" IN ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("complementT" "U" ("binunionT" "U" "A" "B")) <= ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (send-a '(TUTOR-STUDENT-USABLE "woz1_4" "notE" "xmcases" "eqI" "notI" "contradiction" "symeq" "transeq" "symtrans1eq" "symtrans2eq" "binunionT" "binintersectT" "powersetT" "setminusT" "complementT" "setextT" "subsetTI" "powersetTI" "powersetTE" "powersetTI1" "powersetTE1" "complementTI" "complementTE" "complementTI1" "complementTE1" "binintersectTEL" "binintersectTER" "binintersectTI" "binunionTE1" "binunionTE" "binunionTIL" "binunionTIR" "binintersectTELcontra" "binintersectTERcontra" "binunionTILcontra" "binunionTIRcontra" "binunionTEcontra" "demorgan1a" "demorgan2a" "demorgan2a1" "demorgan2a2" "demorgan1b" "demorgan2b2" "demorgan2b" "demorgan1" "demorgan2" "demorgan1Eq2" "demorgan2Eq2" "demorgan3Eq2" "demorgan4Eq2" "contrasubsetT" "contrasubsetT1" "binintersectTSub1" "binintersectTSub2" "binunionTSub1" "binunionTSub2" "impI" "impE" "woz13rule1" "woz13rule2" "woz13rule3" "doubleComplementSub1" "doubleComplementSub2" "doubleComplementEq" "subsetTrans"))
  (send-a '(TUTOR ("woz1_5" "U" "A" "B")))
  (send-a '(CLEARLY ("A" <= ("binunionT" "U" "A" "B"))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("binunionT" "U" "A" "B") <= ("complementT" "U" ("complementT" "U" ("binunionT" "U" "A" "B"))))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY ("A" <= ("complementT" "U" ("complementT" "U" ("binunionT" "U" "A" "B"))))) '(OK) '(NOT-OK))
  (send-a '(CLEARLY (("complementT" "U" ("binunionT" "U" "A" "B")) <= ("complementT" "U" "A"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (scunak-disconnect)
)
(scunak-connect-acl "-k macu -p woz1-sm.lisp -f woz1-lemmas.pam woz1-claims.pam")
(woz1-test)
(scunak-connect-clisp "-k macu -p woz1-sm.lisp -f woz1-lemmas.pam woz1-claims.pam")
(woz1-test)

