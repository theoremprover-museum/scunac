; Author: Chad E Brown
; June 2006
; Testing Scunak on the computation of union and intersection by proving equality

(load "test-connect.lisp")

(defun bool-props-sets-test ()
  (send-a '(TUTOR-AUTO-BACK "setextsub"))
  (send-a '(TUTOR-STUDENT-USABLE "setadjoinE" "notE" "contradiction" "subsetI1" "subsetI2" "binintersectEL" "binintersectER" "binintersectI" "binunionIL" "binunionIR" "binunionE" "binunionCases" "emptysetsubset" "subsetemptysetimpeq" "eqinunit" "uniqinunit"))
  (send-a '(LET "a" OBJ))
  (send-a '(LET "b" OBJ))
  (send-a '(LET "c" OBJ))
  (send-a '(LET "d" OBJ))
  (send-a '(LET "e" OBJ))

(send-a '(tutor ("unionEx1" "a" "b" "c" "d" "e")))
(send-a '(let "x" OBJ) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN ((SETENUM "a" "b" "c") CUP (SETENUM "c" "d" "e")))) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "a")) '(OK) '(NOT-OK))
(send-a '(clearly ("a" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "b" "c"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "b")) '(OK) '(NOT-OK))
(send-a '(clearly ("b" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" == "c")) '(OK) '(NOT-OK))
(send-a '(clearly ("c" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "c")) '(OK) '(NOT-OK))
(send-a '(clearly ("c" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "d")) '(OK) '(NOT-OK))
(send-a '(clearly ("d" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" == "e")) '(OK) '(NOT-OK))
(send-a '(clearly ("e" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(clearly (((SETENUM "a" "b" "c") CUP (SETENUM "c" "d" "e")) <= (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(LET "x" OBJ) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "a" "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "a")) '(OK) '(NOT-OK))
(send-a '(clearly ("a" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "b" "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "b")) '(OK) '(NOT-OK))
(send-a '(clearly ("b" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "c")) '(OK) '(NOT-OK))
(send-a '(clearly ("c" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "d")) '(OK) '(NOT-OK))
(send-a '(clearly ("d" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" == "e")) '(OK) '(NOT-OK))
(send-a '(clearly ("e" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))

(send-a '(LET "aNb" (PF ("not" ("a" == "b")))))
(send-a '(LET "aNc" (PF ("not" ("a" == "c")))))
(send-a '(LET "aNd" (PF ("not" ("a" == "d")))))
(send-a '(LET "aNe" (PF ("not" ("a" == "e")))))
(send-a '(LET "bNc" (PF ("not" ("b" == "c")))))
(send-a '(LET "bNd" (PF ("not" ("b" == "d")))))
(send-a '(LET "bNe" (PF ("not" ("b" == "e")))))
(send-a '(LET "cNd" (PF ("not" ("c" == "d")))))
(send-a '(LET "cNe" (PF ("not" ("c" == "e")))))
(send-a '(LET "dNe" (PF ("not" ("d" == "e")))))

(send-a '(tutor ("intersectEx1" "a" "b" "c" "d" "e" "aNb" "aNc" "aNd" "aNe" "bNc" "bNd" "bNe" "cNd" "cNe" "dNe")))
(send-a '(LET "x" OBJ) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" == "c")) '(OK) '(NOT-OK))
(send-a '(clearly ("c" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("c" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN ((SETENUM "a" "b" "c") CAP (SETENUM "c" "d" "e")))) '(OK) '(NOT-OK))
(send-a '(clearly ((SETENUM "c") <= ((SETENUM "a" "b" "c") CAP (SETENUM "c" "d" "e")))) '(OK) '(NOT-OK))
(send-a '(LET "x" OBJ) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN ((SETENUM "a" "b" "c") CAP (SETENUM "c" "d" "e")))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "a" "b" "c"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" IN (SETENUM "c" "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "c")) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "d" "e"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "d")) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "a")) '(OK) '(NOT-OK))
(send-a '(clearly ("a" == "d")) '(OK) '(NOT-OK))
(send-a '(clearly ("not" ("a" == "d"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "b" "c"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "b")) '(OK) '(NOT-OK))
(send-a '(clearly ("b" == "d")) '(OK) '(NOT-OK))
(send-a '(clearly ("not" ("b" == "d"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "e"))) '(OK) '(NOT-OK))
(send-a '(clearly ("x" == "e")) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "a")) '(OK) '(NOT-OK))
(send-a '(clearly ("a" == "e")) '(OK) '(NOT-OK))
(send-a '(clearly ("not" ("a" == "e"))) '(OK) '(NOT-OK))
(send-a '(QED) '(OK) '(NOT-OK))
(send-a '(assume ("x" IN (SETENUM "b" "c"))) '(OK) '(NOT-OK))
(send-a '(assume ("x" == "b")) '(OK) '(NOT-OK))
(send-a '(clearly ("b" == "e")) '(OK) '(NOT-OK))
(send-a '(clearly ("not" ("b" == "e"))) '(OK) '(NOT-OK))
  (send-a '(QED) '(STUDENT-SUCCESSFUL EXIT-TUTOR) '(NOT-OK NOT-CORRECT STUDENT-FAILED))
  (scunak-disconnect)
)
(scunak-connect-acl "-k macu -p set-computations-sm -f setrules.pam set-computations.pam")
(bool-props-sets-test)
(scunak-connect-clisp "-k macu -p set-computations-sm -f setrules.pam set-computations.pam")
(bool-props-sets-test)

